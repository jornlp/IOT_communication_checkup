# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'capturePage.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMainWindow

import deviceSetup
import report
import reportPage
from captureWorker import CaptureWorker
from reportWorker import ReportWorker
from buttonWorker import ButtonWorker
import tcp_ProxyPage
import tls_ProxyPage


class Ui_captureWindow(QMainWindow):
    def __init__(self):
        super().__init__()

    def setupUi(self, CaptureWindow, input_interface, parent_window):
        self.input_interface = input_interface
        self.parent_window = parent_window
        self.RESTART = False

        CaptureWindow.setObjectName("MainWindow")
        CaptureWindow.resize(1075, 882)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        CaptureWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(CaptureWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(70, 30, 941, 781))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scroll_area = QtWidgets.QScrollArea(self.widget)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setObjectName("scroll_area")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 937, 715))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.packet_scrollArea_layout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)

        self.scroll_area.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scroll_area)
        self.start_capture = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.start_capture.setFont(font)
        self.start_capture.setObjectName("start_capture")

        self.start_capture.clicked.connect(self.start_packet_capture)

        self.verticalLayout.addWidget(self.start_capture)
        self.stop_capture = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.stop_capture.setFont(font)
        self.stop_capture.setObjectName("stop_capture")
        self.stop_capture.clicked.connect(self.stop_thread)
        self.stop_capture.setEnabled(False)

        self.verticalLayout.addWidget(self.stop_capture)
        CaptureWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(CaptureWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1075, 22))
        self.menubar.setObjectName("menubar")
        CaptureWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(CaptureWindow)
        self.statusbar.setObjectName("statusbar")
        CaptureWindow.setStatusBar(self.statusbar)

        self.retranslateUi(CaptureWindow)
        QtCore.QMetaObject.connectSlotsByName(CaptureWindow)

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        deviceSetup.restore_state(deviceSetup.input_interface, deviceSetup.output_interface)
        print("Capture page closed.")
        sys.stdout.flush()

    def retranslateUi(self, captureWindow):
        _translate = QtCore.QCoreApplication.translate
        captureWindow.setWindowTitle(_translate("Capture Page", "Capture Page"))
        self.start_capture.setText(_translate("captureWindow", "Start capture!"))
        self.stop_capture.setText(_translate("captureWindow", "Stop capture!"))

    def start_packet_capture(self):
        self.capture_thread = CaptureWorker(self.input_interface)
        self.capture_thread.captured.connect(self.update_scroll_area)

        self.capture_thread.finished.connect(self.restart_needed)
        self.capture_thread.finished.connect(self.capture_thread.quit)
        self.capture_thread.finished.connect(self.capture_thread.deleteLater)
        self.capture_thread.start()

        # final resets
        self.start_capture.setEnabled(False)
        self.start_capture.setText("Capturing on %s..." % self.input_interface)
        self.stop_capture.setEnabled(True)
        self.capture_thread.finished.connect(
            lambda: self.start_capture.setEnabled(True)
        )

    def restart_needed(self, restart):
        self.RESTART = restart
        if restart:
            self.stop_thread()

    def stop_thread(self):
        self.capture_thread.terminate()
        if not self.RESTART:
            self.stop_capture.setEnabled(False)
            self.start_capture.setText("Start capture! (connect device first)")
            self.start_capture.setEnabled(True)
            self.write_report()
        else:
            self.stop_capture.setEnabled(False)
            self.start_capture.setText("Start capture! (selected interface was not found)")
            self.start_capture.setEnabled(True)
            self.RESTART = False

    def update_scroll_area(self, packet_info, packet_dict, stream_nr, tcp):
        packet_button = QtWidgets.QPushButton(self.scrollAreaWidgetContents)

        packet_button.setEnabled(False)
        packet_button.setText(packet_info)

        if tcp:
            report.stream_button_dictionary[stream_nr] = packet_button

        self.packet_scrollArea_layout.addWidget(packet_button)

    def write_report(self):
        # thread oproepen die bij finishen de report page opent
        self.report_thread = ReportWorker(self.input_interface)

        # update scroll area upon relevant capture
        self.report_thread.finished.connect(self.open_report)

        # upon finish end thread
        self.report_thread.finished.connect(self.report_thread.quit)
        self.report_thread.finished.connect(self.report_thread.deleteLater)
        self.report_thread.start()

    def open_report(self):
        # nodige data uit report.py halen
        self.reportWindow = QtWidgets.QMainWindow()
        self.ui = reportPage.Ui_ReportWindow()
        self.ui.setupUi(self.reportWindow)

        self.button_thread = ButtonWorker()

        self.button_thread.hit.connect(self.add_function)

        # update scroll area upon relevant capture
        self.button_thread.finished.connect(self.reportWindow.show)

        # upon finish end thread
        self.button_thread.finished.connect(self.button_thread.quit)
        self.button_thread.finished.connect(self.button_thread.deleteLater)
        self.button_thread.start()

    def add_function(self, stream_nr, dict_entry):
        button = report.stream_button_dictionary[stream_nr]
        button.clicked.connect(lambda: self.start_proxy_window(dict_entry))
        button.setEnabled(True)

    def start_proxy_window(self, dict_entry):
        if dict_entry[2] == "HTTP" or dict_entry[2] == "MQTT":
            self.tcpWindow = tcp_ProxyPage.Ui_tcpWindow()
            self.tcpWindow.setupUi(self.tcpWindow, dict_entry)
            self.tcpWindow.show()

        elif dict_entry[2] == "TLS":
            self.tlsWindow = tls_ProxyPage.Ui_tlsWindow()
            self.tlsWindow.setupUi(self.tlsWindow, dict_entry)
            self.tlsWindow.show()